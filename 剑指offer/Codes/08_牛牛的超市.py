#
# 
# @param n int整型 ：牛币值种类数
# @param x int整型 ：牛妹拥有的钱数
# @param a int整型二维数组 ：第二个vector中的第一列表示币值，第二列表示牛牛拥有币值的个数
# @return int整型
#
class Solution:
    def solve(self , n , x , a ):
        # write code here
        dp = [[0 for col in range(x+1)] for row in range(n+1)]
        dp[0][0] = 1

        for i in range(1, n+1):
            for j in range(x+1):
                if dp[i-1][j] != 0:
                    k = 0
                    while k <= a[i-1][1] and (j + k * a[i-1][0]) <= x:
                        dp[i][j + k * a[i-1][0]] += dp[i-1][j]
                        k += 1
                        print("==================i={},j={}===============================".format(i, j))
                        print(dp)
        return dp[n][x]

print(Solution().solve(2,10,[[1, 5],[ 2, 4]]))
# print(Solution().solve(5, 30, [[1, 4], [2, 4], [3, 4], [4, 4], [5, 4]]))


# [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#  [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#  [1, 1, 2, 2, 3, 2, 3, 2, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
#  [1, 1, 2, 3, 4, 4, 6, 6, 7, 8, 8, 8, 9, 8, 8, 8, 7, 6, 6, 4, 4, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], 
#  [1, 1, 2, 3, 5, 5, 8, 9, 12, 13, 16, 17, 21, 21, 24, 25, 28, 27, 30, 29, 31, 29, 30, 27, 28, 25, 24, 21, 21, 17, 16], 
#  [1, 1, 2, 3, 5, 6, 9, 11, 15, 18, 22, 26, 32, 36, 42, 47, 54, 59, 66, 71, 78, 83, 89, 93, 99, 102, 106, 108, 111, 111, 113]]