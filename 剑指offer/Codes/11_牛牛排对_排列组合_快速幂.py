#
# 
# @param n int整型 
# @param a int整型一维数组 
# @return int整型
#
class Solution:

    def fastpow(self, a, b):
        if b == 0:
            return 1
        if b == 1:
            return a

        ans = self.fastpow(a, b//2)
        if b % 2 == 0:
            return (ans**2)%(1000000007)
        else:
            return (2*(ans**2))%(1000000007)
            
    def solve(self , n , a ):
        # write code here
        # 人数为n，有奇偶两种情况
        # 如果人数为偶数，则每个对称位置的可能情况有两种，比如最左或最右
        #   即一共有n//2个位置可供选择，每个位置可选的值为两个
        # 如果人数为奇数，则除最中心的位置外，共有n//2个位置可选，每个位置的可选值为两个，最中心位置的可选值为一个
        if n == 0:
            return 0

        if n == 1:
            if a[0] == 1:
                return 0
            else:
                return 1

        # 需要判断是否存在，判断标准即
        #       如果偶数则每个位置是否等于2
        #       如果奇数则除中心位外是否等于2且中心位等于1
        if n % 2 == 0:
            keys = [i for i in range(1, n, 2)]
        else:
            keys = [i for i in range(0, n, 2)]
        print(keys)

        dict = {k: 0 for k in keys}
        for e in a:
            if e not in dict:    # 如果出现了不应该存在的键值，直接删除
                return 0
            else:
                dict[e] += 1
                if dict[e] > 2:
                    return 0

        return self.fastpow(2, n//2)

# print(Solution().solve(3,[2,0,2]))
# print(Solution().solve(3,[1,1,1]))
# print(Solution().solve(127,[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,1]))
print(Solution().solve(586,[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585]))